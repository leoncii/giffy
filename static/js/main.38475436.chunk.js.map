{"version":3,"sources":["components/Gif/index.js","components/ListOfGifs/index.js","services/getGifs.js","context/gifsContext.js","hooks/useGifs.js","pages/Home/index.js","pages/SearchGifs/index.js","pages/Details/index.js","context/index.js","App.js","serviceWorker.js","index.js"],"names":["Gif","id","title","url","href","src","alt","ListOfGifs","gifs","map","key","getGifs","keyword","API_URL","fetch","then","res","json","response","data","image","images","downsized_medium","Context","createContext","GifsContextProvider","children","useState","setGifs","Provider","value","useGifs","useContext","GifsContext","loading","setLoading","useEffect","localStorage","getItem","setItem","POPULARES","Home","setKeyword","useLocation","pushLocation","onSubmit","e","preventDefault","autoFocus","placeholder","type","onChange","target","name","undefined","item","SearchGifs","params","Details","gifDetail","find","console","log","tieneHambre","App","className","component","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.38475436.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nimport { Link } from 'wouter'\r\nconst Gif = ({ id, title, url}) => {\r\n  return (\r\n    <Link href={`/search/${id}`}>\r\n      <h3>{title}</h3>\r\n      <img src={url} alt=\"giffy\" />\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default Gif","import React from 'react'\r\nimport Gif from '../Gif'\r\n\r\nconst ListOfGifs = ({ gifs }) => {\r\n  return (\r\n    <>\r\n      {\r\n        gifs.map(({ id, title, url }) =>\r\n          <Gif\r\n            key={id}\r\n            id={id}\r\n            title={title}\r\n            url={url}\r\n          />\r\n        )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ListOfGifs","\r\nconst API_KEY = 'jiljXIrLPT3TcmYiJIIMXZSnkKl6IHst'\r\n\r\nexport default function getGifs({ keyword }) {\r\n\r\n  const API_URL = `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${keyword}&limit=10&offset=0&rating=R&lang=en`\r\n\r\n  return fetch(API_URL)\r\n    .then(res => res.json())\r\n    .then(response => {\r\n      const { data } = response\r\n      const gifs = data.map(image => {\r\n        const {  title, id } = image\r\n        const { url } = image.images.downsized_medium\r\n        return { title, id, url }\r\n      })\r\n      return gifs\r\n    })\r\n}","import React, { createContext, useState } from 'react'\r\n\r\nconst Context = createContext({})\r\n\r\n\r\nexport function GifsContextProvider({ children }) {\r\n  const [gifs, setGifs] = useState([])\r\n\r\n  return <Context.Provider value={{ gifs, setGifs }}>\r\n    {children}\r\n  </Context.Provider>\r\n}\r\n\r\nexport default Context","import { useState, useEffect, useContext } from 'react'\r\nimport getGifs from '../services/getGifs'\r\nimport GifsContext from '../context/gifsContext'\r\n\r\nconst useGifs = ({ keyword } = { keyword: 'bolivia' }) => {\r\n  // console.log(\"][\", props)\r\n  const { gifs, setGifs } = useContext(GifsContext)\r\n  const [loading, setLoading] = useState(false)\r\n  // console.log('[KEYWORD]', keyword)\r\n\r\n  useEffect(() => {\r\n    setLoading(true)\r\n    const lastKeyword = keyword || localStorage.getItem('lastKeyword')\r\n    getGifs({ keyword: lastKeyword })\r\n      .then(gifs => {\r\n        setGifs(gifs)\r\n        setLoading(false)\r\n        localStorage.setItem('lastKeyword', keyword)\r\n      })\r\n  }, [keyword, setGifs])\r\n\r\n  return { loading, gifs }\r\n}\r\n\r\nexport default useGifs","import React, { useState } from 'react'\r\nimport ListOfGifs from '../../components/ListOfGifs'\r\nimport useGifs from '../../hooks/useGifs'\r\nimport { useLocation } from 'wouter'\r\n\r\nconst POPULARES = [\"code\", \"girl\", \"cafe\", \"sexy\", \"pizza\"]\r\n\r\nconst Home = () => {\r\n\r\n  const [keyword, setKeyword] = useState('')\r\n  const [, pushLocation] = useLocation()\r\n\r\n  const {  gifs } = useGifs()\r\n  // console.log(\"[LOCATION]\", location)\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    // console.log(keyword)\r\n    pushLocation(`/search/${keyword}`)\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setKeyword(e.target.value)\r\n  }\r\n  return <>\r\n    <h1>Home</h1>\r\n    <ul>\r\n      <form\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <input\r\n          autoFocus\r\n          placeholder='Search gif...'\r\n          type=\"text\"\r\n          onChange={handleChange}\r\n          value={keyword}\r\n          name=\"\"\r\n          id=\"\"\r\n        />\r\n        <button>search</button>\r\n      </form>\r\n      <h3>Ultima busqueda</h3>\r\n      {\r\n        gifs === undefined\r\n          ? 'cargando'\r\n          : <ListOfGifs gifs={gifs} />\r\n      }\r\n      {\r\n        POPULARES.map(item => <li key={item}>\r\n          <a href={`/search/${item}`}>\r\n            Gif {item}\r\n          </a>\r\n        </li>)\r\n      }\r\n    </ul>\r\n  </>\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport ListOfGifs from '../../components/ListOfGifs'\r\nimport useGifs from '../../hooks/useGifs'\r\n\r\nconst SearchGifs = ({ params }) => {\r\n  const { keyword } = params\r\n  const { loading, gifs } = useGifs({ keyword })\r\n  // console.log('----')\r\n  return <>\r\n    {\r\n      loading\r\n        ? 'CARGANDO...'\r\n        : <ListOfGifs gifs={gifs} />\r\n    }\r\n  </>\r\n}\r\n//solo mira params\r\n// export default React.memo(SearchGifs)\r\nexport default SearchGifs","import React, { useContext } from 'react'\r\n// import Context from '../../context'\r\nimport GifsContext from '../../context/gifsContext'\r\nimport Gif from '../../components/Gif'\r\n\r\nconst Details = ({ params }) => {\r\n  const { gifs } = useContext(GifsContext)\r\n  const gifDetail = gifs.find(item => item.id === params.id)\r\n  console.log(gifDetail)\r\n\r\n  return <Gif {...gifDetail} />\r\n}\r\n\r\nexport default Details","import { createContext } from 'react'\r\n\r\nconst Context = createContext({\r\n  name: 'leoncii',\r\n  tieneHambre: true\r\n})\r\n\r\nexport default Context","import React from 'react'\nimport './App.css'\nimport Home from './pages/Home'\nimport { Route, Link } from 'wouter'\nimport SearchGifs from './pages/SearchGifs'\nimport Details from './pages/Details'\nimport Context from './context'\nimport { GifsContextProvider } from './context/gifsContext'\n\nfunction App() {\n\n  return (\n    <Context.Provider value={{\n      name: 'leoncii',\n      tieneHambre: true\n    }}>\n      <div className=\"app\">\n        <section className=\"app__wrapper\">\n          <h2>Giffy</h2>\n          <button type='button'><Link href=\"/\">Ir home</Link></button>\n          {/* <SearchGifs gifs={gifs} /> */}\n          <GifsContextProvider>\n            <Route\n              component={Home}\n              path='/'\n            />\n            <Route\n              component={SearchGifs}\n              path='/search/:keyword'\n            />\n            <Route\n              component={Details}\n              path='/search/:id'\n            />\n          </GifsContextProvider>\n        </section>\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}